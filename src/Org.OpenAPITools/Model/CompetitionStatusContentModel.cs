/*
 * Competition Status API
 *
 * API which provides status information for sports competition.                          See https://github.com/Hekku2/competition-status-server/ for more information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Current status of the competition.
    /// </summary>
    [DataContract(Name = "CompetitionStatusContentModel")]
    public partial class CompetitionStatusContentModel : IEquatable<CompetitionStatusContentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionStatusContentModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompetitionStatusContentModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionStatusContentModel" /> class.
        /// </summary>
        /// <param name="eventName">Name of the event. Example: National finals 2022 (required).</param>
        /// <param name="createdAt">Timestamp indicating when this status was generated.  This is always In UTC  Format \&quot;yyyy-MM-ddTHH:mm:ss.fffZ\&quot; (required).</param>
        /// <param name="divisions">Current status of divisions (required).</param>
        /// <param name="currentCompetitor">currentCompetitor.</param>
        public CompetitionStatusContentModel(string eventName = default(string), string createdAt = default(string), List<DivisionStatusModel> divisions = default(List<DivisionStatusModel>), CurrentCompetitorContentModel currentCompetitor = default(CurrentCompetitorContentModel))
        {
            // to ensure "eventName" is required (not null)
            if (eventName == null) {
                throw new ArgumentNullException("eventName is a required property for CompetitionStatusContentModel and cannot be null");
            }
            this.EventName = eventName;
            // to ensure "createdAt" is required (not null)
            if (createdAt == null) {
                throw new ArgumentNullException("createdAt is a required property for CompetitionStatusContentModel and cannot be null");
            }
            this.CreatedAt = createdAt;
            // to ensure "divisions" is required (not null)
            if (divisions == null) {
                throw new ArgumentNullException("divisions is a required property for CompetitionStatusContentModel and cannot be null");
            }
            this.Divisions = divisions;
            this.CurrentCompetitor = currentCompetitor;
        }

        /// <summary>
        /// Name of the event. Example: National finals 2022
        /// </summary>
        /// <value>Name of the event. Example: National finals 2022</value>
        [DataMember(Name = "eventName", IsRequired = true, EmitDefaultValue = false)]
        public string EventName { get; set; }

        /// <summary>
        /// Timestamp indicating when this status was generated.  This is always In UTC  Format \&quot;yyyy-MM-ddTHH:mm:ss.fffZ\&quot;
        /// </summary>
        /// <value>Timestamp indicating when this status was generated.  This is always In UTC  Format \&quot;yyyy-MM-ddTHH:mm:ss.fffZ\&quot;</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Current status of divisions
        /// </summary>
        /// <value>Current status of divisions</value>
        [DataMember(Name = "divisions", IsRequired = true, EmitDefaultValue = false)]
        public List<DivisionStatusModel> Divisions { get; set; }

        /// <summary>
        /// Gets or Sets CurrentCompetitor
        /// </summary>
        [DataMember(Name = "currentCompetitor", EmitDefaultValue = false)]
        public CurrentCompetitorContentModel CurrentCompetitor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompetitionStatusContentModel {\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Divisions: ").Append(Divisions).Append("\n");
            sb.Append("  CurrentCompetitor: ").Append(CurrentCompetitor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompetitionStatusContentModel);
        }

        /// <summary>
        /// Returns true if CompetitionStatusContentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CompetitionStatusContentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompetitionStatusContentModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Divisions == input.Divisions ||
                    this.Divisions != null &&
                    input.Divisions != null &&
                    this.Divisions.SequenceEqual(input.Divisions)
                ) && 
                (
                    this.CurrentCompetitor == input.CurrentCompetitor ||
                    (this.CurrentCompetitor != null &&
                    this.CurrentCompetitor.Equals(input.CurrentCompetitor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventName != null)
                {
                    hashCode = (hashCode * 59) + this.EventName.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Divisions != null)
                {
                    hashCode = (hashCode * 59) + this.Divisions.GetHashCode();
                }
                if (this.CurrentCompetitor != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentCompetitor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
