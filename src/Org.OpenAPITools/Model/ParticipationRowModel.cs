/*
 * Competition Status API
 *
 * API which provides status information for sports competition.                          See https://github.com/Hekku2/competition-status-server/ for more information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This represents a finished or or otherwise resolved performance result.  Result might be missing, if performance has been finished but has not been  graded yet or if the competitor has forfeited.
    /// </summary>
    [DataContract(Name = "ParticipationRowModel")]
    public partial class ParticipationRowModel : IEquatable<ParticipationRowModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParticipationRowModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParticipationRowModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParticipationRowModel" /> class.
        /// </summary>
        /// <param name="id">Unique ID for these comeptitors (required).</param>
        /// <param name="competitors">Competitors (required).</param>
        /// <param name="result">result.</param>
        /// <param name="forfeit">If true, competitors are shown as forfeited for this division.    In this context, forfeit can happen if:  a) Competitor doesn&#39;t show up for competition  b) Competitor gets injured and is unable to continue  c) Competitor is disqualified    This doesn&#39;t care if it&#39;s competitor&#39;s fault or not, this just  means that competitors score is not shown.    This means following:  a) Results are not shown, if given.  b) These competitors are not shown schedule.  c) When listed, competitors are shown in the bottom part of the  listing. (required).</param>
        public ParticipationRowModel(int id = default(int), List<CompetitorModel> competitors = default(List<CompetitorModel>), PoleSportResultModel result = default(PoleSportResultModel), bool forfeit = default(bool))
        {
            this.Id = id;
            // to ensure "competitors" is required (not null)
            if (competitors == null) {
                throw new ArgumentNullException("competitors is a required property for ParticipationRowModel and cannot be null");
            }
            this.Competitors = competitors;
            this.Forfeit = forfeit;
            this.Result = result;
        }

        /// <summary>
        /// Unique ID for these comeptitors
        /// </summary>
        /// <value>Unique ID for these comeptitors</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Competitors
        /// </summary>
        /// <value>Competitors</value>
        [DataMember(Name = "competitors", IsRequired = true, EmitDefaultValue = false)]
        public List<CompetitorModel> Competitors { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public PoleSportResultModel Result { get; set; }

        /// <summary>
        /// If true, competitors are shown as forfeited for this division.    In this context, forfeit can happen if:  a) Competitor doesn&#39;t show up for competition  b) Competitor gets injured and is unable to continue  c) Competitor is disqualified    This doesn&#39;t care if it&#39;s competitor&#39;s fault or not, this just  means that competitors score is not shown.    This means following:  a) Results are not shown, if given.  b) These competitors are not shown schedule.  c) When listed, competitors are shown in the bottom part of the  listing.
        /// </summary>
        /// <value>If true, competitors are shown as forfeited for this division.    In this context, forfeit can happen if:  a) Competitor doesn&#39;t show up for competition  b) Competitor gets injured and is unable to continue  c) Competitor is disqualified    This doesn&#39;t care if it&#39;s competitor&#39;s fault or not, this just  means that competitors score is not shown.    This means following:  a) Results are not shown, if given.  b) These competitors are not shown schedule.  c) When listed, competitors are shown in the bottom part of the  listing.</value>
        [DataMember(Name = "forfeit", IsRequired = true, EmitDefaultValue = true)]
        public bool Forfeit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParticipationRowModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Competitors: ").Append(Competitors).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Forfeit: ").Append(Forfeit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParticipationRowModel);
        }

        /// <summary>
        /// Returns true if ParticipationRowModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ParticipationRowModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParticipationRowModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Competitors == input.Competitors ||
                    this.Competitors != null &&
                    input.Competitors != null &&
                    this.Competitors.SequenceEqual(input.Competitors)
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Forfeit == input.Forfeit ||
                    this.Forfeit.Equals(input.Forfeit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Competitors != null)
                {
                    hashCode = (hashCode * 59) + this.Competitors.GetHashCode();
                }
                if (this.Result != null)
                {
                    hashCode = (hashCode * 59) + this.Result.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Forfeit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
