/*
 * Competition Status API
 *
 * API which provides status information for sports competition.                          See https://github.com/Hekku2/competition-status-server/ for more information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This represens a current status for a division.  This is generated on the fly.
    /// </summary>
    [DataContract(Name = "DivisionStatusModel")]
    public partial class DivisionStatusModel : IEquatable<DivisionStatusModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DivisionStatusModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DivisionStatusModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DivisionStatusModel" /> class.
        /// </summary>
        /// <param name="name">Name if the division. Example: \&quot;Senior women\&quot; (required).</param>
        /// <param name="results">Current results in order. Forfeited are not yet listed (required).</param>
        /// <param name="forfeited">Forfeited competitors. Is empty if no one has forfeited. These are  not returned in any special order. (required).</param>
        /// <param name="upcomingCompetitorModels">Upcoming competitors. First is in zero index.  This can be empty, if no competitors are remaining. (required).</param>
        public DivisionStatusModel(string name = default(string), List<ParticipationRowModel> results = default(List<ParticipationRowModel>), List<ParticipationRowModel> forfeited = default(List<ParticipationRowModel>), List<UpcomingCompetitorModel> upcomingCompetitorModels = default(List<UpcomingCompetitorModel>))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for DivisionStatusModel and cannot be null");
            }
            this.Name = name;
            // to ensure "results" is required (not null)
            if (results == null) {
                throw new ArgumentNullException("results is a required property for DivisionStatusModel and cannot be null");
            }
            this.Results = results;
            // to ensure "forfeited" is required (not null)
            if (forfeited == null) {
                throw new ArgumentNullException("forfeited is a required property for DivisionStatusModel and cannot be null");
            }
            this.Forfeited = forfeited;
            // to ensure "upcomingCompetitorModels" is required (not null)
            if (upcomingCompetitorModels == null) {
                throw new ArgumentNullException("upcomingCompetitorModels is a required property for DivisionStatusModel and cannot be null");
            }
            this.UpcomingCompetitorModels = upcomingCompetitorModels;
        }

        /// <summary>
        /// Name if the division. Example: \&quot;Senior women\&quot;
        /// </summary>
        /// <value>Name if the division. Example: \&quot;Senior women\&quot;</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Current results in order. Forfeited are not yet listed
        /// </summary>
        /// <value>Current results in order. Forfeited are not yet listed</value>
        [DataMember(Name = "results", IsRequired = true, EmitDefaultValue = false)]
        public List<ParticipationRowModel> Results { get; set; }

        /// <summary>
        /// Forfeited competitors. Is empty if no one has forfeited. These are  not returned in any special order.
        /// </summary>
        /// <value>Forfeited competitors. Is empty if no one has forfeited. These are  not returned in any special order.</value>
        [DataMember(Name = "forfeited", IsRequired = true, EmitDefaultValue = false)]
        public List<ParticipationRowModel> Forfeited { get; set; }

        /// <summary>
        /// Upcoming competitors. First is in zero index.  This can be empty, if no competitors are remaining.
        /// </summary>
        /// <value>Upcoming competitors. First is in zero index.  This can be empty, if no competitors are remaining.</value>
        [DataMember(Name = "upcomingCompetitorModels", IsRequired = true, EmitDefaultValue = false)]
        public List<UpcomingCompetitorModel> UpcomingCompetitorModels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DivisionStatusModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Forfeited: ").Append(Forfeited).Append("\n");
            sb.Append("  UpcomingCompetitorModels: ").Append(UpcomingCompetitorModels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DivisionStatusModel);
        }

        /// <summary>
        /// Returns true if DivisionStatusModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DivisionStatusModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DivisionStatusModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.Forfeited == input.Forfeited ||
                    this.Forfeited != null &&
                    input.Forfeited != null &&
                    this.Forfeited.SequenceEqual(input.Forfeited)
                ) && 
                (
                    this.UpcomingCompetitorModels == input.UpcomingCompetitorModels ||
                    this.UpcomingCompetitorModels != null &&
                    input.UpcomingCompetitorModels != null &&
                    this.UpcomingCompetitorModels.SequenceEqual(input.UpcomingCompetitorModels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                if (this.Forfeited != null)
                {
                    hashCode = (hashCode * 59) + this.Forfeited.GetHashCode();
                }
                if (this.UpcomingCompetitorModels != null)
                {
                    hashCode = (hashCode * 59) + this.UpcomingCompetitorModels.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
