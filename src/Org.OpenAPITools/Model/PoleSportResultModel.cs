/*
 * Competition Status API
 *
 * API which provides status information for sports competition.                          See https://github.com/Hekku2/competition-status-server/ for more information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a score in Pole Dance Sport series
    /// </summary>
    [DataContract(Name = "PoleSportResultModel")]
    public partial class PoleSportResultModel : IEquatable<PoleSportResultModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PoleSportResultModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PoleSportResultModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PoleSportResultModel" /> class.
        /// </summary>
        /// <param name="total">Calculated total score (A+E+D-HJ).  This is used to sort the score board. (required).</param>
        /// <param name="artisticScore">Artistic score (A) (required).</param>
        /// <param name="executionScore">Execution score (E) (required).</param>
        /// <param name="difficultyScore">Difficulty score (D) (required).</param>
        /// <param name="headJudgePenalty">Head judge penalty (HJ). This is subtracted from the total. (required).</param>
        public PoleSportResultModel(double total = default(double), double artisticScore = default(double), double executionScore = default(double), double difficultyScore = default(double), double headJudgePenalty = default(double))
        {
            this.Total = total;
            this.ArtisticScore = artisticScore;
            this.ExecutionScore = executionScore;
            this.DifficultyScore = difficultyScore;
            this.HeadJudgePenalty = headJudgePenalty;
        }

        /// <summary>
        /// Calculated total score (A+E+D-HJ).  This is used to sort the score board.
        /// </summary>
        /// <value>Calculated total score (A+E+D-HJ).  This is used to sort the score board.</value>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = false)]
        public double Total { get; set; }

        /// <summary>
        /// Artistic score (A)
        /// </summary>
        /// <value>Artistic score (A)</value>
        [DataMember(Name = "artisticScore", IsRequired = true, EmitDefaultValue = false)]
        public double ArtisticScore { get; set; }

        /// <summary>
        /// Execution score (E)
        /// </summary>
        /// <value>Execution score (E)</value>
        [DataMember(Name = "executionScore", IsRequired = true, EmitDefaultValue = false)]
        public double ExecutionScore { get; set; }

        /// <summary>
        /// Difficulty score (D)
        /// </summary>
        /// <value>Difficulty score (D)</value>
        [DataMember(Name = "difficultyScore", IsRequired = true, EmitDefaultValue = false)]
        public double DifficultyScore { get; set; }

        /// <summary>
        /// Head judge penalty (HJ). This is subtracted from the total.
        /// </summary>
        /// <value>Head judge penalty (HJ). This is subtracted from the total.</value>
        [DataMember(Name = "headJudgePenalty", IsRequired = true, EmitDefaultValue = false)]
        public double HeadJudgePenalty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PoleSportResultModel {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  ArtisticScore: ").Append(ArtisticScore).Append("\n");
            sb.Append("  ExecutionScore: ").Append(ExecutionScore).Append("\n");
            sb.Append("  DifficultyScore: ").Append(DifficultyScore).Append("\n");
            sb.Append("  HeadJudgePenalty: ").Append(HeadJudgePenalty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PoleSportResultModel);
        }

        /// <summary>
        /// Returns true if PoleSportResultModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PoleSportResultModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PoleSportResultModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.ArtisticScore == input.ArtisticScore ||
                    this.ArtisticScore.Equals(input.ArtisticScore)
                ) && 
                (
                    this.ExecutionScore == input.ExecutionScore ||
                    this.ExecutionScore.Equals(input.ExecutionScore)
                ) && 
                (
                    this.DifficultyScore == input.DifficultyScore ||
                    this.DifficultyScore.Equals(input.DifficultyScore)
                ) && 
                (
                    this.HeadJudgePenalty == input.HeadJudgePenalty ||
                    this.HeadJudgePenalty.Equals(input.HeadJudgePenalty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                hashCode = (hashCode * 59) + this.ArtisticScore.GetHashCode();
                hashCode = (hashCode * 59) + this.ExecutionScore.GetHashCode();
                hashCode = (hashCode * 59) + this.DifficultyScore.GetHashCode();
                hashCode = (hashCode * 59) + this.HeadJudgePenalty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
