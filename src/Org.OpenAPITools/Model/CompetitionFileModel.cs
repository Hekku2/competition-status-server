/*
 * Competition Status API
 *
 * API which provides status information for sports competition.                          See https://github.com/Hekku2/competition-status-server/ for more information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Describes the filemodel that is used to save current status of  competition. This model should hold all information of the competition  that can be saved to file.
    /// </summary>
    [DataContract(Name = "CompetitionFileModel")]
    public partial class CompetitionFileModel : IEquatable<CompetitionFileModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionFileModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompetitionFileModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionFileModel" /> class.
        /// </summary>
        /// <param name="name">Name of the whole competition. (required).</param>
        /// <param name="divisions">Divisions for this competition. (required).</param>
        /// <param name="currentCompetitor">currentCompetitor.</param>
        public CompetitionFileModel(string name = default(string), List<DivisionFileModel> divisions = default(List<DivisionFileModel>), CurrentCompetitorFileModel currentCompetitor = default(CurrentCompetitorFileModel))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CompetitionFileModel and cannot be null");
            }
            this.Name = name;
            // to ensure "divisions" is required (not null)
            if (divisions == null) {
                throw new ArgumentNullException("divisions is a required property for CompetitionFileModel and cannot be null");
            }
            this.Divisions = divisions;
            this.CurrentCompetitor = currentCompetitor;
        }

        /// <summary>
        /// Name of the whole competition.
        /// </summary>
        /// <value>Name of the whole competition.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Divisions for this competition.
        /// </summary>
        /// <value>Divisions for this competition.</value>
        [DataMember(Name = "divisions", IsRequired = true, EmitDefaultValue = false)]
        public List<DivisionFileModel> Divisions { get; set; }

        /// <summary>
        /// Gets or Sets CurrentCompetitor
        /// </summary>
        [DataMember(Name = "currentCompetitor", EmitDefaultValue = false)]
        public CurrentCompetitorFileModel CurrentCompetitor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompetitionFileModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Divisions: ").Append(Divisions).Append("\n");
            sb.Append("  CurrentCompetitor: ").Append(CurrentCompetitor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompetitionFileModel);
        }

        /// <summary>
        /// Returns true if CompetitionFileModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CompetitionFileModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompetitionFileModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Divisions == input.Divisions ||
                    this.Divisions != null &&
                    input.Divisions != null &&
                    this.Divisions.SequenceEqual(input.Divisions)
                ) && 
                (
                    this.CurrentCompetitor == input.CurrentCompetitor ||
                    (this.CurrentCompetitor != null &&
                    this.CurrentCompetitor.Equals(input.CurrentCompetitor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Divisions != null)
                {
                    hashCode = (hashCode * 59) + this.Divisions.GetHashCode();
                }
                if (this.CurrentCompetitor != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentCompetitor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
