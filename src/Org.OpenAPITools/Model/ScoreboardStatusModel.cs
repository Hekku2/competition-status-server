/*
 * Competition Status API
 *
 * API which provides status information for sports competition.                          See https://github.com/Hekku2/competition-status-server/ for more information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ScoreboardStatusModel
    /// </summary>
    [DataContract(Name = "ScoreboardStatusModel")]
    public partial class ScoreboardStatusModel : IEquatable<ScoreboardStatusModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ScoreboardMode
        /// </summary>
        [DataMember(Name = "scoreboardMode", IsRequired = true, EmitDefaultValue = false)]
        public ScoreboardModeModel ScoreboardMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardStatusModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScoreboardStatusModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreboardStatusModel" /> class.
        /// </summary>
        /// <param name="latestUpdate">latestUpdate (required).</param>
        /// <param name="scoreboardMode">scoreboardMode (required).</param>
        /// <param name="result">result.</param>
        /// <param name="upcomingCompetitors">upcomingCompetitors (required).</param>
        /// <param name="results">results (required).</param>
        public ScoreboardStatusModel(DateTime latestUpdate = default(DateTime), ScoreboardModeModel scoreboardMode = default(ScoreboardModeModel), PerformanceResultsContentModel result = default(PerformanceResultsContentModel), List<UpcomingCompetitorModel> upcomingCompetitors = default(List<UpcomingCompetitorModel>), List<ParticipationRowModel> results = default(List<ParticipationRowModel>))
        {
            this.LatestUpdate = latestUpdate;
            this.ScoreboardMode = scoreboardMode;
            // to ensure "upcomingCompetitors" is required (not null)
            if (upcomingCompetitors == null) {
                throw new ArgumentNullException("upcomingCompetitors is a required property for ScoreboardStatusModel and cannot be null");
            }
            this.UpcomingCompetitors = upcomingCompetitors;
            // to ensure "results" is required (not null)
            if (results == null) {
                throw new ArgumentNullException("results is a required property for ScoreboardStatusModel and cannot be null");
            }
            this.Results = results;
            this.Result = result;
        }

        /// <summary>
        /// Gets or Sets LatestUpdate
        /// </summary>
        [DataMember(Name = "latestUpdate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime LatestUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public PerformanceResultsContentModel Result { get; set; }

        /// <summary>
        /// Gets or Sets UpcomingCompetitors
        /// </summary>
        [DataMember(Name = "upcomingCompetitors", IsRequired = true, EmitDefaultValue = false)]
        public List<UpcomingCompetitorModel> UpcomingCompetitors { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", IsRequired = true, EmitDefaultValue = false)]
        public List<ParticipationRowModel> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScoreboardStatusModel {\n");
            sb.Append("  LatestUpdate: ").Append(LatestUpdate).Append("\n");
            sb.Append("  ScoreboardMode: ").Append(ScoreboardMode).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  UpcomingCompetitors: ").Append(UpcomingCompetitors).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScoreboardStatusModel);
        }

        /// <summary>
        /// Returns true if ScoreboardStatusModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ScoreboardStatusModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScoreboardStatusModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LatestUpdate == input.LatestUpdate ||
                    (this.LatestUpdate != null &&
                    this.LatestUpdate.Equals(input.LatestUpdate))
                ) && 
                (
                    this.ScoreboardMode == input.ScoreboardMode ||
                    this.ScoreboardMode.Equals(input.ScoreboardMode)
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.UpcomingCompetitors == input.UpcomingCompetitors ||
                    this.UpcomingCompetitors != null &&
                    input.UpcomingCompetitors != null &&
                    this.UpcomingCompetitors.SequenceEqual(input.UpcomingCompetitors)
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LatestUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.LatestUpdate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ScoreboardMode.GetHashCode();
                if (this.Result != null)
                {
                    hashCode = (hashCode * 59) + this.Result.GetHashCode();
                }
                if (this.UpcomingCompetitors != null)
                {
                    hashCode = (hashCode * 59) + this.UpcomingCompetitors.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
