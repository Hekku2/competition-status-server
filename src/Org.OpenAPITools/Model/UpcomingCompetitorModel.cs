/*
 * Competition Status API
 *
 * API which provides status information for sports competition.                          See https://github.com/Hekku2/competition-status-server/ for more information.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents an upcoming competitor.
    /// </summary>
    [DataContract(Name = "UpcomingCompetitorModel")]
    public partial class UpcomingCompetitorModel : IEquatable<UpcomingCompetitorModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpcomingCompetitorModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpcomingCompetitorModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpcomingCompetitorModel" /> class.
        /// </summary>
        /// <param name="id">Unique ID for these competitors (required).</param>
        /// <param name="competitors">Competitor(s). Contains at least one entity. (required).</param>
        public UpcomingCompetitorModel(int id = default(int), List<CompetitorModel> competitors = default(List<CompetitorModel>))
        {
            this.Id = id;
            // to ensure "competitors" is required (not null)
            if (competitors == null) {
                throw new ArgumentNullException("competitors is a required property for UpcomingCompetitorModel and cannot be null");
            }
            this.Competitors = competitors;
        }

        /// <summary>
        /// Unique ID for these competitors
        /// </summary>
        /// <value>Unique ID for these competitors</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Competitor(s). Contains at least one entity.
        /// </summary>
        /// <value>Competitor(s). Contains at least one entity.</value>
        [DataMember(Name = "competitors", IsRequired = true, EmitDefaultValue = false)]
        public List<CompetitorModel> Competitors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpcomingCompetitorModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Competitors: ").Append(Competitors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpcomingCompetitorModel);
        }

        /// <summary>
        /// Returns true if UpcomingCompetitorModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UpcomingCompetitorModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpcomingCompetitorModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Competitors == input.Competitors ||
                    this.Competitors != null &&
                    input.Competitors != null &&
                    this.Competitors.SequenceEqual(input.Competitors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Competitors != null)
                {
                    hashCode = (hashCode * 59) + this.Competitors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
